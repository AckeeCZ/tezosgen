// Generated using TezosGen 
// swiftlint:disable file_length

struct {{ contractName }}Box {
    fileprivate let tezosClient: TezosClient 
    fileprivate let at: String

    init(tezosClient: TezosClient, at: String) {
       self.tezosClient = tezosClient 
       self.at = at 
    }
    func call({{ contract.params }}) -> ContractMethodInvocation {
		let input: {{ contract.parameter_type }} = {{ contract.init }} 
        let send: (_ from: Wallet, _ amount: Tez, _ completion: @escaping RPCCompletion<String>) -> Void = { from, amount, completion in
            self.tezosClient.send(amount: amount, to: self.at, from: from, input: input, completion: completion)
        }

        return ContractMethodInvocation(send: send)
    }

	func status(completion: @escaping RPCCompletion<{{ contractName }}Status>) {
        let endpoint = "/chains/main/blocks/head/context/contracts/" + at
        tezosClient.sendRPC(endpoint: endpoint, method: .get, completion: completion)
    }
}

struct {{ contractName }}Status: Decodable {
    let balance: Tez
    let spendable: Bool
    let manager: String
    let delegate: StatusDelegate
    let counter: Int
    let storage: {% if contract.simple %}{{ contract.storage_type }}{% else %}{{ contractName }}StatusStorage{% endif %} 

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: ContractStatusKeys.self)
        self.balance = try container.decode(Tez.self, forKey: .balance)
        self.spendable = try container.decode(Bool.self, forKey: .spendable)
        self.manager = try container.decode(String.self, forKey: .manager)
        self.delegate = try container.decode(StatusDelegate.self, forKey: .delegate)
        self.counter = try container.decodeRPC(Int.self, forKey: .counter)

        let scriptContainer = try container.nestedContainer(keyedBy: ContractStatusKeys.self, forKey: .script)
        {% if contract.simple %}{% if contract.key == "set" or contract.key == "list" %}self.storage = try scriptContainer.decodeRPC({{ contract.storage_type }}.self, forKey: .storage){% else %}self.storage = try scriptContainer.nestedContainer(keyedBy: StorageKeys.self, forKey: .storage).decodeRPC({{ contract.storage_type }}.self, forKey: .{{ contract.key }}){% endif %}{% elif not contract.key %}
        self.storage = try scriptContainer.nestedContainer(keyedBy: StorageKeys.self, forKey: .storage).decodeRPC({{ contract.storage_type }}.self){% else %}self.storage = try scriptContainer.decode({{ contractName }}StatusStorage.self, forKey: .storage){% endif %}
    }
}{% if not contract.simple %}

struct {{ contractName }}StatusStorage: Decodable {
	{{ contract.args }}

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StorageKeys.self)
        let tezosElement = try container.decode({{ contract.storage_type }}.self, forKey: .args)

		{{ contract.init_args }}
    }
}{% endif %}

extension TezosClient {
    func {% filter lowerFirstLetter %}{{ contractName }}{% endfilter %}(at: String) -> {{ contractName }}Box {
        return {{ contractName }}Box(tezosClient: self, at: at)
    }
}
